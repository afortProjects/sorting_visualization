<button class="sorting-button" @onclick="RunBubbleSort">Bubble Sort</button>

@code {
    [Parameter]    public List<SortableObject> List { get; set; } = new List<SortableObject>();
    [Parameter]    public int Delay {get; set; } = 0;
    [Parameter]    public Action UpdateParent { get; set; }
    [Parameter]    public bool WasSortingLaunched {get; set;}
    [Parameter]    public EventCallback<bool> UpdateWasSortingToParent { get; set; }   
    public async Task RunBubbleSort() {
        if (WasSortingLaunched) {
            return;
        }

        WasSortingLaunched = true;
        await UpdateWasSortingToParent.InvokeAsync(true);

        int n = List.Count;

        for (int i = 0; i < n - 1 && WasSortingLaunched; i++) {
            for (int j = 0; j < n - i - 1 && WasSortingLaunched; j++) {
                List[j].State = SortingState.BeingSorted;
                List[j + 1].State = SortingState.BeingSorted;
                UpdateParent();

                if (List[j].Number > List[j + 1].Number) {
                    List[j].State = SortingState.HigherValue;
                    UpdateParent();

                    SortableObject temp = List[j];
                    List[j] = List[j + 1];
                    List[j + 1] = temp;
                }

                List[j].State = SortingState.Waiting;
                await Task.Delay(Delay);
                UpdateParent();
            }
            if(!WasSortingLaunched) {
                return;
            }
            List[n - i - 1].State = SortingState.InGoodPlace;
            UpdateParent();
        }
        
        if(!WasSortingLaunched) {
            return;
        }

        List[0].State = SortingState.InGoodPlace;

        WasSortingLaunched = false;
        await UpdateWasSortingToParent.InvokeAsync(false);

        UpdateParent();
    }
}